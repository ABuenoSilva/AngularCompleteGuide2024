import { Component, computed, signal } from '@angular/core';
import { DUMMY_USERS } from '../dummy-users';

const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);

@Component({
  selector: 'app-user',
  standalone: true,
  imports: [],
  templateUrl: './user.component.html',
  styleUrl: './user.component.css'
})
export class UserComponent {

  //Input como signal
  avatar = input<string>();
  name = input.required<string>();
  imagePath = computed(() => `assets/users/${this.avatar()}`);
  //Signal procura por subscribers para atualizar, diferente de utilizar state com zone.js que procura por todos os locais
  selectedUser = signal(DUMMY_USERS[randomIndex]);
  //Compute deve ser usado para fazer subscribe implícito no signal ao invés de criar um get diretamente
  //Para pegar o valor do signal deve chama-lo como uma funação
  imagePath = computed(() => `assets/users/${this.selectedUser().avatar}`);

  /*   get imagePath() {
    return `assets/users/${this.selectedUser().avatar}`;
  } */

  onSelectUser() {
    const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);
    //Para atualizar o signal deve-se utilizar o set
    this.selectedUser.set(DUMMY_USERS[randomIndex]);
  }
}
